version: '3.9'

services:
  frontend:
    build:
      context: ./frontend
    container_name: event-app-frontend
    ports:
      - "3000:3000"
    networks:
      - common-network
    env_file:
      - .env

  backend:
    build:
      context: ./backend
    container_name: event-app-backend
    ports:
      - "5001:5000"
    networks:
      - common-network
    env_file:
      - .env
    depends_on:
      - postgres-db

  postgres-db:
    image: postgres:13
    container_name: postgres-db
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: eventsdb
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./event-app/init-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - common-network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "8083:80"
    depends_on:
      - postgres-db
    networks:
      - common-network

  solace:
    container_name: solace
    image: solace/solace-pubsub-standard:latest
    volumes:
      - "solace:/var/lib/solace"
    shm_size: 1g
    ulimits:
      core: -1
      nofile:
        soft: 2448
        hard: 6592
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 1
    ports:
      - 8008:8008
      - 1443:1443
      - 1943:1943
      - 1883:1883
      - 5671:5671
      - 5672:5672
      - 8005:8000
      - 8442:8443
      - 8883:8883
      - 8081:8080
      - 9000:9000
      - 9443:9443
      - 55554:55555
      - 55050:55003
      - 55443:55443
      - 2222:2222
    environment:
      - username_admin_globalaccesslevel=admin
      - username_admin_password=admin
      - system_scaling_maxconnectioncount=100
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 15s
      start_interval: 5s
    networks:
      - common-network

  solace-init:
    build:
      context: ../NEMS_Test_Harness/solace/
      dockerfile: Dockerfile
    container_name: solace-init
    restart: "no"
    depends_on:
      solace:
        condition: service_healthy
    networks:
      - common-network

  publisher:
    container_name: test-publisher
    build:
      context: ../NEMS_Test_Harness/NEMS_Test_Publisher/
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    networks:
      - common-network
    depends_on:
      - solace
      - solace-init

  subscriber0:
    container_name: test-sub-birth-queue
    build:
      context: ../NEMS_Test_Harness/NEMS_Test_Subscriber/
      dockerfile: Dockerfile
    environment:
      nems.broker.queue: Birth
    networks:
      - common-network
    depends_on:
      - solace
      - solace-init

  subscriber1:
    container_name: test-sub-death-queue
    build:
      context: ../NEMS_Test_Harness/NEMS_Test_Subscriber/
      dockerfile: Dockerfile
    environment:
      nems.broker.queue: Death
    networks:
      - common-network
    depends_on:
      - solace
      - solace-init

  subscriber2:
    container_name: test-sub-enrollment-queue
    build:
      context: ../NEMS_Test_Harness/NEMS_Test_Subscriber/
      dockerfile: Dockerfile
    environment:
      nems.broker.queue: Enrollment
    networks:
      - common-network
    depends_on:
      - solace
      - solace-init

networks:
  common-network:
    driver: bridge

volumes:
  postgres-data:
  solace:
